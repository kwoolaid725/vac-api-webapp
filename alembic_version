"""empty message

Revision ID: cd62b3b381f7
Revises:
Create Date: 2023-06-09 09:57:05.765460

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'cd62b3b381f7'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('password', sa.String(), nullable=False),
    sa.Column('full_name', sa.String(), nullable=False),
    sa.Column('role', sa.String(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_table('tests',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('category', sa.String(), nullable=False),
    sa.Column('vac_type', sa.String(), nullable=False),
    sa.Column('test_status', sa.String(), nullable=False),
    sa.Column('assigned1', sa.Integer(), server_default='9999', nullable=False),
    sa.Column('assigned2', sa.Integer(), nullable=True),
    sa.Column('create_date', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('due_date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('complete_date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('notes', sa.String(), nullable=True),
    sa.Column('owner_id', sa.Integer(), server_default='9999', nullable=False),
    sa.ForeignKeyConstraint(['assigned1'], ['users.id'], ondelete='SET DEFAULT'),
    sa.ForeignKeyConstraint(['assigned2'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ondelete='SET DEFAULT'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tests_id'), 'tests', ['id'], unique=False)
    op.create_table('vacuums',
    sa.Column('inv_no', sa.Integer(), nullable=False),
    sa.Column('type', sa.String(), nullable=False),
    sa.Column('brand', sa.String(), nullable=False),
    sa.Column('model_name', sa.String(), nullable=False),
    sa.Column('product_stage', sa.String(), nullable=True),
    sa.Column('color', sa.String(), nullable=True),
    sa.Column('dual_nozzle', sa.Boolean(), server_default='False', nullable=True),
    sa.Column('fluffy_nozzle', sa.Boolean(), server_default='False', nullable=True),
    sa.Column('self_empty', sa.Boolean(), server_default='False', nullable=True),
    sa.Column('self_clean', sa.Boolean(), server_default='False', nullable=True),
    sa.Column('release_date', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('image', sa.String(), nullable=True),
    sa.Column('owner_id', sa.Integer(), server_default='9999', nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ondelete='SET DEFAULT'),
    sa.PrimaryKeyConstraint('inv_no')
    )
    op.create_index(op.f('ix_vacuums_inv_no'), 'vacuums', ['inv_no'], unique=False)
    op.create_table('cr_cordless',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('test_parent_id', sa.Integer(), nullable=False),
    sa.Column('test_target', sa.String(), nullable=False),
    sa.Column('test_group', sa.String(), nullable=False),
    sa.Column('test_case', sa.String(), nullable=True),
    sa.Column('tester', sa.Integer(), server_default='9999', nullable=False),
    sa.Column('inv_no', sa.Integer(), nullable=False),
    sa.Column('brush_type', sa.String(), nullable=False),
    sa.Column('power_setting', sa.String(), nullable=True),
    sa.Column('test_measure', sa.String(), nullable=False),
    sa.Column('value', sa.String(), nullable=False),
    sa.Column('units', sa.String(), nullable=True),
    sa.Column('run', sa.Integer(), nullable=False),
    sa.Column('run_date', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('room_temp', sa.Float(), nullable=True),
    sa.Column('relative_humidity', sa.Float(), nullable=True),
    sa.Column('notes', sa.String(), nullable=True),
    sa.Column('image', sa.String(), nullable=True),
    sa.Column('owner_id', sa.Integer(), server_default='0', nullable=False),
    sa.ForeignKeyConstraint(['inv_no'], ['vacuums.inv_no'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ondelete='SET DEFAULT'),
    sa.ForeignKeyConstraint(['test_parent_id'], ['tests.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tester'], ['users.id'], ondelete='SET DEFAULT'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_cr_cordless_id'), 'cr_cordless', ['id'], unique=False)
    op.create_table('cr_robot',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('test_parent_id', sa.Integer(), nullable=False),
    sa.Column('test_target', sa.String(), nullable=False),
    sa.Column('test_case', sa.String(), nullable=True),
    sa.Column('tester', sa.Integer(), server_default='9999', nullable=False),
    sa.Column('inv_no', sa.Integer(), nullable=False),
    sa.Column('power_setting', sa.String(), nullable=True),
    sa.Column('test_measure', sa.String(), nullable=False),
    sa.Column('value', sa.String(), nullable=False),
    sa.Column('units', sa.String(), nullable=True),
    sa.Column('run', sa.Integer(), nullable=False),
    sa.Column('run_date', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('notes', sa.String(), nullable=True),
    sa.Column('image', sa.String(), nullable=True),
    sa.Column('owner_id', sa.Integer(), server_default='0', nullable=False),
    sa.ForeignKeyConstraint(['inv_no'], ['vacuums.inv_no'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ondelete='SET DEFAULT'),
    sa.ForeignKeyConstraint(['test_parent_id'], ['tests.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tester'], ['users.id'], ondelete='SET DEFAULT'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_cr_robot_id'), 'cr_robot', ['id'], unique=False)
    op.create_table('test_vacuums',
    sa.Column('vacuum_inv_no', sa.Integer(), nullable=False),
    sa.Column('test_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['test_id'], ['tests.id'], ),
    sa.ForeignKeyConstraint(['vacuum_inv_no'], ['vacuums.inv_no'], ),
    sa.PrimaryKeyConstraint('vacuum_inv_no', 'test_id')
    )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('test_vacuums')
    op.drop_index(op.f('ix_cr_robot_id'), table_name='cr_robot')
    op.drop_table('cr_robot')
    op.drop_index(op.f('ix_cr_cordless_id'), table_name='cr_cordless')
    op.drop_table('cr_cordless')
    op.drop_index(op.f('ix_vacuums_inv_no'), table_name='vacuums')
    op.drop_table('vacuums')
    op.drop_index(op.f('ix_tests_id'), table_name='tests')
    op.drop_table('tests')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
